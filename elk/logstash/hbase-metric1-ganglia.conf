input {
    file {
        path => "/data0/hbase/metric/metrics_*.log"
        start_position => beginning
        ignore_older => 0
    }
}

filter {
    ruby{
        init =>"
            def processJvmMetric(event)
                hostName,processName,sessionId,*metricsContent = event['content'].split(', ')
	            hostName = hostName.split('=')[1]
	            processName = processName.split('=')[1]
	            sessionId = sessionId.split('=')[1]

	            metricsContent.map{|metric|
	                single_metric_event=LogStash::Event.new()

	                single_metric_event['metricGroupName'] = event['metricGroupName']
	                single_metric_event['metricTime'] = event['metricTime']
	                single_metric_event['hostName'] = hostName
	                single_metric_event['processName'] = processName
	                single_metric_event['sessionId'] = sessionId
	                single_metric_event['metricName'],single_metric_event['metricValue'] = metric.split('=')

	                single_metric_event
	            }
            end

            def processRegionServerMetric(event)
                regionServer,hostName,*metricsContent = event['content'].split(', ')

                regionServer = regionServer.split('=')[1]
                hostName = hostName.split('=')[1]

                metricsContent.map{|metric|
                    single_metric_event=LogStash::Event.new()

	                single_metric_event['metricGroupName'] = event['metricGroupName']
	                single_metric_event['metricTime'] = event['metricTime']
	                single_metric_event['hostName'] = hostName
	                single_metric_event['regionServer'] = regionServer
	                single_metric_event['metricName'],single_metric_event['metricValue'] = metric.split('=')

	                single_metric_event
                }

            end

            def filter(event)
                begin
	                event['header'],event['content'] = event['message'].split(': ')
		            event['metricTime'],event['metricGroupName'] = event['header'].split(' ')

		            case event['metricGroupName']
		            when 'jvm.metrics'
		                processJvmMetric(event).each{|single_event|
		                    yield single_event
		                }
		            when 'hbase.regionserver'
		                processRegionServerMetric(event).each{|single_event|
		                    yield single_event
		                }
		            end
		        rescue
		            puts event
		        end
		        event.cancel
            end
        "

        code => "filter(event)"
    }
}

output {
    ganglia{
        group => event['metricGroupName']
        host => 'dckafka1'
        metric => event['metricName']
        metric_type => 'double'
        port => '8654'
        value => event['metricValue']
    }
    stdout {
        codec => rubydebug
    }
}